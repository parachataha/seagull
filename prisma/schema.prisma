generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// USER PROFILE DATA
//
model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  slug      String? @unique
  password  String
  about     String?
  label     String?
  avatarId  Int     @default(1)
  createdAt Int
  updatedAt Int?

  // Optional information to provide more public details
  location  String?
  timezone  String?
  startWork Int?
  endWork   Int?

  avatar   Image?      @relation(fields: [avatarId], references: [id])
  Sessions Session[]
  Images   Image[]     @relation("UserImages")
  Skills   UserSkill[]
  Timeline Timeline[]
}

model UserSkill {
  id        Int         @id @default(autoincrement())
  name      String
  userId    Int
  parentId  Int?
  order     Int?
  color     String      @default("255, 255, 255")
  parent    UserSkill?  @relation("SkillHierarchy", fields: [parentId], references: [id])
  children  UserSkill[] @relation("SkillHierarchy")
  createdAt Int

  user         User           @relation(fields: [userId], references: [id])
  ProjectSkill ProjectSkill[]

  @@unique([name, userId, parentId]) // Prevents duplicate skills per user under same parent
}

model Image {
  id        Int    @id @default(autoincrement())
  name      String
  url       String
  size      Int
  userId    Int?
  createdAt Int

  user         User?          @relation("UserImages", fields: [userId], references: [id], onDelete: Cascade)
  User         User[]
  ProjectImage ProjectImage[]
}

//
// AUTHENTICATION
//
model Session {
  user       User    @relation(fields: [userId], references: [id])
  id         String  @id
  userId     Int
  userAgent  String?
  secretHash Bytes
  createdAt  Int
  expiresAt  Int
}

//
// PROJECTS
//
model Timeline {
  id        Int    @id @default(autoincrement())
  name      String
  userId    Int
  createdAt Int
  updatedAt Int?

  user     User      @relation(fields: [userId], references: [id])
  projects Project[]
}

model Project {
  id          Int     @id @default(autoincrement())
  timelineId  Int
  title       String
  description String?
  client      String? // could store "@client" or "Personal"
  startDate   Int
  endDate     Int?
  order       Int?

  caseStudyUrl String?
  projectUrl   String?

  timeline Timeline @relation(fields: [timelineId], references: [id])

  // Relation to skills
  skills ProjectSkill[]
  // Relation to images
  images ProjectImage[]
}

model ProjectSkill {
  id        Int @id @default(autoincrement())
  projectId Int
  skillId   Int

  project Project   @relation(fields: [projectId], references: [id])
  skill   UserSkill @relation(fields: [skillId], references: [id])

  @@unique([projectId, skillId])
}

model ProjectImage {
  id        Int @id @default(autoincrement())
  projectId Int
  imageId   Int

  project Project @relation(fields: [projectId], references: [id])
  image   Image   @relation(fields: [imageId], references: [id])

  @@unique([projectId, imageId])
}
