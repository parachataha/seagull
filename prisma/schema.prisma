generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USER PROFILE DATA
model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  slug      String? @unique
  password  String
  about     String?
  label     String?
  avatarId  Int     @default(1)
  createdAt Int
  updatedAt Int?

  // Optional information to provide more public details
  location  String?
  timezone  String?
  startWork Int?
  endWork   Int?

  sessions Session[]
  avatar   Image?      @relation(fields: [avatarId], references: [id])
  images   Image[]     @relation("UserImages")
  Skill    UserSkill[]
}

model UserSkill {
  id       Int         @id @default(autoincrement())
  name     String
  userId   Int
  parentId Int?
  color    String      @default("255, 255, 255")
  parent   UserSkill?  @relation("SkillHierarchy", fields: [parentId], references: [id])
  children UserSkill[] @relation("SkillHierarchy")

  user User @relation(fields: [userId], references: [id])

  @@unique([name, userId, parentId]) // Prevents duplicate skills per user under same parent
}

model Image {
  id        Int    @id @default(autoincrement())
  name      String
  url       String
  size      Int
  userId    Int?
  createdAt Int

  user User?  @relation("UserImages", fields: [userId], references: [id], onDelete: Cascade)
  User User[]
}

// AUTHENTICATION
model Session {
  user       User    @relation(fields: [userId], references: [id])
  id         String  @id
  userId     Int
  userAgent  String?
  secretHash Bytes
  createdAt  Int
  expiresAt  Int
}
